
(define (block-ipc interp)
  (lambda (script)
    (define (cmd-ipc method arg)
      (format "~a ~a ~a ~a" interp script method arg))
    (define (start-ipc method arg)
      (open-process-ports
       (cmd-ipc method arg)
       (buffer-mode line)
       (make-transcoder (utf-8-codec))))
    (define (run-ipc-sig arg)
      (let-values (((stdin stdout stderr pid) (start-ipc "sig" arg)))
	(close-input-port stderr)
	(close-output-port stdin)
	(let ((l (json-read stdout)))
	  (close-input-port stdout)
	  l)))
    (define (run-ipc-get arg)
      (define (iter stdout)
	(let ((l (read-line stdout)))
	  (cond
	   ((eof-object? l)
	    (close-input-port stdout)
	    '())
	   (else
	    (cons l (iter stdout))))))
      (lambda ()
	(let-values (((stdin stdout stderr pid) (start-ipc "get" arg)))
	  ;;(display (format "spawned ~a\n" pid))
	  (close-input-port stderr)
	  (close-output-port stdin)
	  (iter stdout))))
    (lambda (sym)
      (make-block
       (lambda (m)
	 (case m
	   ((sig)
	    `(block-ipc ,(run-ipc-sig sym)))
	   ((get)
	    (lambda ()
	      (run-ipc-get sym)))))))))
